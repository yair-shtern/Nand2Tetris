// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset=1 then the 
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //handle A Register

    //should any data be loaded to A?
    Not(in=instruction[15],out=aInst);
    And(a=instruction[15],b=instruction[5],out=cInstLoadA);
    //A instruction or a C instruction inwhich A is a destination
    Or(a=aInst,b=cInstLoadA,out=loadA);

    //what data is to be loaded to A?
    Mux16(a=instruction,b=outALU,sel=instruction[15],out=newA);

    ARegister(in=newA,load=loadA,out=outA,out[0..14]=addressM);

    //ALU
    //choose whether Y=A or M
    Mux16(a=outA,b=inM,sel=instruction[12],out=inY);
    ALU(x=outD,y=inY,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=outALU,out=outM,zr=isZero,ng=isNeg);

    //handle D Register
    And(a=instruction[4],b=instruction[15],out=loadD);
    DRegister(in=outALU,load=loadD,out=outD);
    
    And(a=instruction[15],b=instruction[3],out=writeM);
    
    //determine whether to jump
    Not(in=isZero,out=notZero);
    Not(in=isNeg,out=notNeg);
    And(a=notZero,b=notNeg,out=isPos);

    And(a=instruction[2],b=isNeg,out=j1);
    And(a=instruction[1],b=isZero,out=j2);
    And(a=instruction[0],b=isPos,out=j3);

    Or(a=j1,b=j2,out=j1OrJ2);
    Or(a=j1OrJ2,b=j3,out=jmp);
 
    And(a=jmp,b=instruction[15],out=loadPC);

    PC(in=outA,load=loadPC,inc=true,reset=reset,out[0..14]=pc);
}

