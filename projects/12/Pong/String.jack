// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array array;
    field int length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let array = Array.new(maxLength+1);
        let length = 0;
        return this;

    }

    /** Disposes this string. */
    method void dispose() {
        do array.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return array[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let array[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let array[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, result, digit;
        var boolean neg;
        let result = 0;
        let i = 0;
        if(array[0] = 45){ // -
            let neg = true;
            let i = i + 1;
        }
        else{
            let neg = false;
        }
        while(i < length){
            if((array[i] < 58) & (array[i] > 47)){
                let digit = array[i] - 48;
                let result = (result * 10) + digit; 
            }
            else{
                let i = length;
            }
            let i = i + 1;
        }
        if(neg){
            return -result;
        }
        return result;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int digit, exp;
        let length = 0;
        if (val < 0) {
        do appendChar(45);
        let val = -val;
        }

        while (~(val=0)) {
            let exp = 1;
            let digit = val;

            while (digit > 9) {
                let digit = digit / 10;
                let exp = exp * 10;
            }

            let val = val - (exp * digit);
            do appendChar(digit + 48);
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
