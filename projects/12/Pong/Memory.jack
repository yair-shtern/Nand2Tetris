// This file is part of nand2tetris, as taught in The Hebrew University,
// and was written by Aviv Yaish, and is published under the Creative 
// Common Attribution-NonCommercial-ShareAlike 3.0 Unported License 
// https://creativecommons.org/licenses/by-nc-sa/3.0/
// It is an extension to the specifications given in  
// https://www.nand2tetris.org (Shimon Schocken and Noam Nisan, 2017)
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0 
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array memory;
    static Array freeList;
    static int heapBase;

    /** Initializes the class. */
    function void init() {
        let heapBase = 2048;
        let memory = 0;
        let freeList = heapBase;
        let freeList[0] = 16384 - 2048; 
        let freeList[1] = null; 
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array blockFound,next,result;
        let blockFound = Memory.firstFit(size);
        let result = -1;
        if(~(blockFound = null)){
            let result = blockFound + 1;
            if(blockFound[0] > (size + 3)){
                let next = blockFound + size + 1;
                let next[1] = blockFound[1];
                let next[0] = blockFound[0] - size - 1;
                let result[-1] = size + 1;
                let freeList = next;
            }else{
                let next = blockFound[1];
                let result[-1] = blockFound[0];
            }
            let blockFound = next;
        }
        return result;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array prev,next;
        var int size;
        let size = o[-1];
        let o = o - 1;//must consider block[-1]
        let prev = Memory.findPreFree(o);
        if(prev = null){
            let o[0] = size;
            let o[1] = freeList;
            let freeList = o;
        }else{
            if((prev + prev[0]) = o){
                let prev[0] = prev[0] + size;
                let o = prev;
            }else{
                let o[0] = size;
                let o[1] = prev[1];
                let prev[1] = o;
            }
        }
        if((o + o[0]) = o[1]){
            let next = o[1];
            let o[0] = o[0] + next[0];
            let o[1] = next[1];
        }
        return;
    }    

    /** Returns the maximal element contained in the given Array/object. */
	function int max(Array o) {
        return o[o[-1]-1];
    }
    
    /** 
     * Find previous free block
     * helper function for deAlloc
     */
    function Array findPreFree(int o){
        var Array prev;
        if(freeList > o){
            return null;
        }
        let prev = freeList;
        while(~(prev[1] = null) & (prev[1] < o)){
            let prev = prev[1];
        }
        return prev;
    }

    function Array firstFit(int size){
        var Array curr, block;
        let block = null;
        let curr = freeList;
        if(curr[1] = null){
            return curr;
        }
        while(~(curr = null)){
            if(~(curr[0] - 1 < size)){
                let block = curr;
                }
            let curr = curr[1];
        }
        return block;
    }
}
